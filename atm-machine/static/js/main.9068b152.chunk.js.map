{"version":3,"sources":["components/header-content.js","components/machine-component.js","components/money-dispenser.js.js","components/atm-machine.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContent","className","React","Component","MachineComponent","props","state","currencyValue","setValue","bind","e","this","setState","target","value","type","onChange","onClick","onSubmit","MoneyDispenser","moneyObj","keys","Object","counter","listItem","map","key","AtmMachine","2000","500","200","100","50","20","10","5","2","1","calculateDenomination","val","moneyValue","i","length","multipe","parseInt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAYeA,G,uLARP,OACI,oCACI,wBAAIC,UAAU,gBAAd,oB,GAJYC,IAAMC,Y,cCuBnBC,E,YAvBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,cAAe,GAEnB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBALD,E,sEAOVC,GACLC,KAAKC,SAAS,CAACL,cAAcG,EAAEG,OAAOC,U,+BAIhC,IAAD,OACL,OACI,yBAAKb,UAAU,qBACX,4CACA,2BAAOc,KAAK,SAASd,UAAU,gBAAgBa,MAAOH,KAAKL,MAAMC,cAAeS,SAAUL,KAAKH,WAC/F,4BAAQP,UAAU,gBAAgBgB,QAAS,kBAAM,EAAKZ,MAAMa,SAAS,EAAKZ,MAAMC,iBAAhF,e,GAlBeL,IAAMC,WC4BtBgB,E,8OAxBcd,M,+BAIrB,IAAIe,EAAWT,KAAKN,MAAMe,SACtBC,EAAOC,OAAOD,KAAKD,GACnBG,EAAUZ,KAAKN,MAAMkB,QACrBC,EAAWH,EAAKI,KAAI,SAACC,GACtB,OAAQ,wBAAIzB,UAAU,iBAAiByB,IAAKA,GAApC,YAAmDA,EAAnD,sBAA2EN,EAASM,OAG/F,OACI,yBAAKzB,UAAU,mBACX,wBAAIA,UAAU,qBAAd,iBACA,wBAAIA,UAAU,kBACTuB,GAEL,uBAAGvB,UAAU,WAAb,4BAAiDsB,Q,GArBpCrB,IAAMC,W,kOCoDpBwB,E,YAhDX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,cAAc,EACda,SAAU,CAACQ,IAAK,EAAGC,IAAI,EAAGC,IAAI,EAAGC,IAAI,EAAGC,GAAG,EAAGC,GAAG,EAAGC,GAAG,EAAGC,EAAE,EAAGC,EAAE,EAAGC,EAAE,GACtEd,QAAQ,EACRF,KAAO,IAEX,EAAKb,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAK6B,sBAAwB,EAAKA,sBAAsB7B,KAA3B,gBATd,E,sEAaV8B,GACL5B,KAAKC,SAAS,CAACL,cAAcgC,IAC7B5B,KAAK2B,sBAAsBC,K,4CAGTA,GAQlB,IANA,IAAIhB,EAAU,EACViB,EAAaD,EACbnB,E,yVAAQ,IAAOT,KAAKL,MAAMc,UAC1BC,EAAOC,OAAOD,KAAKD,GAGfqB,EAFMpB,EAAKqB,OAEC,EAAED,GAAG,EAAEA,IAAK,CAC5B,IAAIf,EAAML,EAAKoB,GACf,GAAGD,EAAa,EAAG,CACf,IAAIG,EAAUC,SAASJ,EAAWd,GAClCH,GAAWoB,EACXvB,EAASM,GAAOiB,EAChBH,GAAeG,EAAUjB,GAIjCf,KAAKC,SAAS,CAACW,QAAQA,EAAQH,SAASA,M,+BAGxC,OACI,yBAAKnB,UAAU,kBACZ,kBAAC,EAAD,CAAkBiB,SAAUP,KAAKH,WACjC,kBAAC,EAAD,CAAgBe,QAASZ,KAAKL,MAAMiB,QAASH,SAAUT,KAAKL,MAAMc,gB,GA3CxDlB,IAAMC,WCYhB0C,E,iLAVX,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUC,IAAMC,WCQJ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9068b152.chunk.js","sourcesContent":["import React from 'react';\n\nclass HeaderContent extends React.Component {\n    render() {\n        return (\n            <>\n                <h1 className=\"heading_text\">ATM Machine</h1>\n            </>\n    )\n } \n}\n\nexport default HeaderContent;","import React from 'react';\nclass MachineComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyValue: 0\n        }\n        this.setValue = this.setValue.bind(this);\n    }\n    setValue(e) {\n        this.setState({currencyValue:e.target.value})\n    }\n\n    \n    render() {\n        return (\n            <div className=\"machine_component\">\n                <h3>Enter Amount</h3>\n                <input type=\"number\" className=\"machine_input\" value={this.state.currencyValue} onChange={this.setValue}/>\n                <button className=\"submit_button\" onClick={() => this.props.onSubmit(this.state.currencyValue)}>Submit</button>\n            </div>\n        )\n    }\n}\n\nexport default MachineComponent;","import React from 'react';\nclass MoneyDispenser extends React.Component {\n    componentDidMount() {\n\n    }\n    getDerivedStateFromProps(props) {\n        debugger;\n    }\n    render() {\n        let moneyObj = this.props.moneyObj;\n        let keys = Object.keys(moneyObj);\n        let counter = this.props.counter\n        let listItem = keys.map((key)=> {\n           return  <li className=\"dispenser_item\" key={key}>Count of {key}Rs. note would be: {moneyObj[key]}</li>\n        });\n\n        return (\n            <div className=\"money_dispenser\">\n                <h3 className=\"dispenser_heading\"> You will get</h3>\n                <ul className=\"dispenser_list\">\n                    {listItem}\n                </ul>  \n                <p className=\"counter\">Total count of notes is: {counter}</p> \n            </div>\n\n        )\n    }\n}\n\nexport default MoneyDispenser;","import React from 'react';\nimport MachineComponent from './machine-component.js';\nimport MoneyDispenser from './money-dispenser.js';\n\nclass AtmMachine extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currencyValue:0,\n            moneyObj: {2000:0, 500:0, 200:0, 100:0, 50:0, 20:0, 10:0, 5:0, 2:0, 1:0},\n            counter:0,\n            keys : []\n        }\n        this.setValue = this.setValue.bind(this);\n        this.calculateDenomination = this.calculateDenomination.bind(this);\n\n    }\n\n    setValue(val) {\n        this.setState({currencyValue:val})\n        this.calculateDenomination(val);\n    }\n\n    calculateDenomination(val) {\n        debugger;\n        let counter = 0;\n        let moneyValue = val;\n        let moneyObj = {...this.state.moneyObj}\n        let keys = Object.keys(moneyObj);\n        let keysLen = keys.length;\n\n        for(let i = keysLen-1;i>=0;i--) {\n            let key = keys[i];\n            if(moneyValue > 0) {\n                let multipe = parseInt(moneyValue/key);\n                counter += multipe;\n                moneyObj[key] = multipe;\n                moneyValue -=  multipe * key;\n            }\n            \n        }\n        this.setState({counter:counter,moneyObj:moneyObj})\n    }\n    render() {\n        return (\n            <div className=\"money_dispnser\">  \n               <MachineComponent onSubmit={this.setValue}></MachineComponent>\n               <MoneyDispenser counter={this.state.counter} moneyObj={this.state.moneyObj}></MoneyDispenser>\n            </div>\n    )\n } \n}\n\nexport default AtmMachine;","import React from 'react';\nimport './App.scss';\nimport HeaderContent from './components/header-content.js';\nimport AtmMachine from './components/atm-machine.js';\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HeaderContent></HeaderContent>\n        <AtmMachine ></AtmMachine>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}